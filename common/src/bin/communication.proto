option java_package = "se.cygni.texasholdem.communication";
option java_outer_classname = "ClientServer";
option optimize_for = SPEED;
option java_generic_services = true;

/*
 * Common types
 */
message Void {}

message Ping {}

message VoidInSession {
    required string sessionId = 1;
}

enum PBExceptionType {
    NO_EXCEPTION = 1;
    INVALID_SESSION = 2;
    PLAYER_NAME_ALREADY_TAKEN = 3;
    NOT_IN_CORRECT_PLAY_STATE = 10;
    INVALID_AMOUNT = 11;
}

message ExceptionEvent {
    optional PBExceptionType exceptionType = 1 [default = NO_EXCEPTION];
    optional string message = 2;
}

message PBMessage {
    required string message = 1;
}

enum PBRank {
    DEUCE = 1;
    THREE = 2;
    FOUR = 3;
    FIVE = 4;
    SIX = 5;
    SEVEN = 6;
    EIGHT = 7;
    NINE = 8;
    TEN = 9;
    JACK = 10;
    QUEEN = 11;
    KING = 12;
    ACE = 13;
}

enum PBSuit {
    CLUBS = 1;
    DIAMONDS = 2;
    HEARTS = 3;
    SPADES = 4;
}

message PBCard {
    required PBRank rank = 1;
    required PBSuit suit = 2;
}

enum PBActionType {
    CHECK = 1;
    FOLD = 2;
    CALL = 3;
    RAISE = 4;
    ALL_IN = 5;
}

message PBAction {
    required PBActionType actionType = 1;
    optional fixed64 amount = 2;
}

message PBPossibleActions {
    repeated PBAction actions = 1;
}

enum PBState {
    PRE_FLOP = 1;
    FLOP = 2;
    TURN = 3;
    RIVER = 4;
    SHOWDOWN = 5;
    NOT_IN_PLAY = 9;
}

message PBPlayer {
    required string name = 1;
    required bool inPlay = 2;
    required fixed64 chipCount = 3;
}

message PBPlayers {
    repeated PBPlayer players = 1;
}

message PBPlayerWinAmount {
    required PBPlayer player = 1;
    required fixed64 winAmount = 2;
}

message PBPlayersWinAmount {
    repeated PBPlayerWinAmount playersWinAmount = 1;
}

/*
 * GameServer
 */

message RegisterForPlayRequest {
    required string playerName = 1;
    optional string sessionId = 2;
}

message RegisterForPlayResponse {
    optional string sessionId = 1;
    optional ExceptionEvent exception = 9;
}

message MyChipAmountResponse {
    optional fixed64 amount = 1;
    optional ExceptionEvent exception = 9;
}

message PotAmountResponse {
    optional fixed64 amount = 1;
    optional ExceptionEvent exception = 9;
}

message PlayStateResponse {
    optional PBState state = 1;
    optional ExceptionEvent exception = 9;
}

message PlayersResponse {
    optional PBPlayers players = 1;
    optional ExceptionEvent exception = 9;
}

message DealerPlayerResponse {
    optional PBPlayer player = 1;
    optional ExceptionEvent exception = 9;
}

message SmallBlindPlayerResponse {
    optional PBPlayer player = 1;
    optional ExceptionEvent exception = 9;
}

message BigBlindPlayerResponse {
    optional PBPlayer player = 1;
    optional ExceptionEvent exception = 9;
}

message CommunityCardsResponse {
    repeated PBCard cards = 1;
    optional ExceptionEvent exception = 9;
}

message MyCardsResponse {
    repeated PBCard cards = 1;
    optional ExceptionEvent exception = 9;
}

message SmallBlindAmountResponse {
    optional fixed64 amount = 1;
    optional ExceptionEvent exception = 9;
}

message BigBlindAmountResponse {
    optional fixed64 amount = 1;
    optional ExceptionEvent exception = 9;
}

/*
 * Player
 */
message PlayIsStartedEvent {
    required PBPlayers players = 1;
    required fixed64 yourPotAmount = 2;
}

message YouHaveBeenDealtACardEvent {
    required PBCard card = 1;
}

message CommunityHasBeenDealtACardEvent {
    required PBCard card = 1;
}

message PlayerFoldedEvent {
    required PBPlayer player = 1;
    required fixed64 investmentInPot = 2;
}

message PlayerCalledEvent {
    required PBPlayer player = 1;
    required fixed64 callBet = 2;
}

message PlayerRaisedEvent {
    required PBPlayer player = 1;
    required fixed64 callBet = 2;
    required fixed64 raiseBet = 3;
}

message PlayerWentAllInEvent {
    required PBPlayer player = 1;
    required fixed64 callBet = 2;
    required fixed64 raiseBet = 3;
}

message PlayerCheckedEvent {
    required PBPlayer player = 1;
}

message ShowDownEvent {
    required PBPlayersWinAmount playersWinAmount = 1;
}

message YouWonAmountEvent {
    required fixed64 amount = 1;
}

message PlayerWithdrewEvent {
    required PBPlayer player = 1;
}

service GameService {
    rpc ping(Void) returns (Ping);

    rpc registerForPlay(RegisterForPlayRequest) returns (RegisterForPlayResponse);
    rpc withdraw(VoidInSession) returns (Void);
    rpc getMyChipAmount(VoidInSession) returns (MyChipAmountResponse);
    rpc getSmallBlindAmount(VoidInSession) returns (SmallBlindAmountResponse);
    rpc getBigBlindAmount(VoidInSession) returns (BigBlindAmountResponse);
    rpc getPotAmount(VoidInSession) returns (PotAmountResponse);
    rpc getPlayState(VoidInSession) returns (PlayStateResponse);
    rpc getPlayers(VoidInSession) returns (PlayersResponse);
    rpc getDealerPlayer(VoidInSession) returns (DealerPlayerResponse);
    rpc getSmallBlindPlayer(VoidInSession) returns (SmallBlindPlayerResponse);
    rpc getBigBlindPlayer(VoidInSession) returns (BigBlindPlayerResponse);
    rpc getCommunityCards(VoidInSession) returns (CommunityCardsResponse);
    rpc getMyCards(VoidInSession) returns (MyCardsResponse);

}

service PlayerService {
    rpc ping(Void) returns (Ping);
    rpc serverIsShuttingDown(PBMessage) returns (Void);

    rpc onPlayIsStarted(PlayIsStartedEvent) returns (Void);
    rpc onYouHaveBeenDealtACard(YouHaveBeenDealtACardEvent) returns (Void);
    rpc onCommunityHasBeenDealtACard(CommunityHasBeenDealtACardEvent) returns (Void);
    rpc onPlayerFolded(PlayerFoldedEvent) returns (Void);
    rpc onPlayerCalled(PlayerCalledEvent) returns (Void);
    rpc onPlayerRaised(PlayerRaisedEvent) returns (Void);
    rpc onPlayerWentAllIn(PlayerWentAllInEvent) returns (Void);
    rpc onPlayerChecked(PlayerCheckedEvent) returns (Void);
    rpc onShowDown(ShowDownEvent) returns (Void);
    rpc onYouWonAmount(YouWonAmountEvent) returns (Void);
    rpc onPlayerWithdrew(PlayerWithdrewEvent) returns (Void);

    rpc onYouMustAct(PBPossibleActions) returns (PBAction);
}