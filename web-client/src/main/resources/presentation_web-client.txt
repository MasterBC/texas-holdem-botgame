stolpar:

Allmänt om tanken:
Samma API som för Java även asynkront på samma sätt
Websocket med Atmosphere

Skriva JS-spelare som egen modul/fil testbar med QUnit

Teknik och deploy
Krav; Java, HTML5-browser (Chrome)
Ladda ner JS-kittet och kör med conf av host för pokerserver
kör bat/sh-fil 

-HTML5-sida med JS som servas av lokal web-server som agerar "proxy" mot pokerservern.

-Tre olika JS-filer:
1. pokerPlayer.js - din spelare med din egen logik
2. pokerClient.js - kod för att integrera jQuery websocket-kommunikationen med din JS-player
3. pokerApp.js - Det är denna kod som startar spelet genom att skapa och koppla ihop pokerClient och din pokerPlayer.
-HTML-filer:
1. poker.html - Spela med GUI som dynamiskt uppdateras.
2. pokerHeadless.html - Spela utan GUI
3. testPlayer.html - QUnit-test för funktioner som måste uppfyllas i spelaren (kör efter varje ändring i pokerPlayer.js men ändra ej i första hand i denna)
4. testMyPlayer.html - QUnit för specifika funktioner som just din spelare skall ha (lägga dina egna player-tester här)

Ja utvecklaren skall fokusera på player-JS-filen (pokerPlayer.js) och köra QUnit när man önskar (idealt efter varje ändring, "endast reload av sida testPlayer.html"). Dock kanske man behöver visa eller logga data under utvecklingen av sin spelare för att kunna förbättra den och DÅ kunna behöver koda lite i pokerApp.js. Vad tycker du Emil?

huvudpunkterna i pokerApp.js, dvs:
- spec-Objektet med config och GUI-callbacks
- Skapa pokerClient med spec som argument
- Skapa pspelaren,dvs  player = pokerPlayer(name)
- Starta mha client.registerForPlay(player, room)



